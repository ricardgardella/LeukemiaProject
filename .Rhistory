numeric.colums <- gtools::mixedsort(colnames(train)[grepl("X", colnames(train))])
train <- train[,numeric.colums]
traint <- t(train)
colnames(traint) <- paste0("g", seq(1,nrow(train)))
traint <- as.data.frame(traint)
n_train_ALL <- 27
n_train_AML <- 1
response <- c(rep(1,n_train_ALL),rep(0,n_train_AML))
response
traint <- cbind(traint, response)
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data_set_ALL_AML_train.csv", sep=";", header=TRUE)
numeric.colums <- gtools::mixedsort(colnames(train)[grepl("X", colnames(train))])
train <- train[,numeric.colums]
traint <- t(train)
colnames(traint) <- paste0("g", seq(1,nrow(train)))
traint <- as.data.frame(traint)
n_train_ALL <- 27
n_train_AML <- 11
response <- c(rep(1,n_train_ALL),rep(0,n_train_AML))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",27), rep("blue",11)))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train))
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
# loading plot
plot(p1, "loadings", comps = 1:2, legendpos = "topleft", labels = rownames(p1$loadings),main="Loading plot")
abline(h = 0)
# plot of correlations between scores (T) and Xtrain should give similar information to the plot of loadings
corXpc <- cor(X_train,p1$scores)
xyplot(as.ts(corXpc[,1:nd]), screens=1, col=1:nd, main="Correlations of NIR with PCR components")
abline(0,0)
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data_set_ALL_AML_train.csv", sep=";", header=TRUE)
numeric.colums <- gtools::mixedsort(colnames(train)[grepl("X", colnames(train))])
train <- train[,numeric.colums]
traint <- t(train)
colnames(traint) <- paste0("g", seq(1,nrow(train)))
traint <- as.data.frame(traint)
n_train_ALL <- 27
n_train_AML <- 11
response <- c(rep(1,n_train_ALL),rep(0,n_train_AML))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data_set_ALL_AML_train.csv", sep=";", header=TRUE)
numeric.colums <- gtools::mixedsort(colnames(train)[grepl("X", colnames(train))])
train <- train[,numeric.colums]
traint <- t(train)
colnames(traint) <- paste0("g", seq(1,nrow(train)))
traint <- as.data.frame(traint)
n_train_ALL <- 27
n_train_AML <- 11
response <- c(rep(1,n_train_ALL),rep(0,n_train_AML))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
test  <- read.csv("data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dff) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
n_train_ALL <- 27
n_train_AML <- 11
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=response)
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
n_train_ALL <- 27
n_train_AML <- 11
response <- c(rep(1,n_train_ALL),rep(0,n_train_AML))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=response)
abline(h=0,v=0, col="gray")
text(p1$scores, labels=rownames(p1$scores), col=c(rep("red",n_train_ALL), rep("blue",n_train_AML)))
response == 1 ? "red" : "blue"
plot(R2(p1), legendpos = "bottomright")
plot(RMSEP(p1), legendpos = "topright")
factor(levels=c(0,1), labels=c("red","blue"))
factor(response, levels=c(0,1), labels=c("red","blue"))
text(p1$scores, labels=rownames(p1$scores), col=factor(response, levels=c(0,1), labels=c("red","blue")))
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=factor(response, levels=c(0,1), labels=c("red","blue")))
plot(R2(p1), legendpos = "bottomright")
plot(RMSEP(p1), legendpos = "topright")
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=factor(response, levels=c(0,1), labels=c("red","blue")))
factor(response, levels=c(0,1), labels=c("red","blue"))
as.vector(factor(response, levels=c(0,1), labels=c("red","blue")))
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response, levels=c(0,1), labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
plot(RMSEP(p1), legendpos = "topright")
RMSEP(p1)
train.response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- test[,-ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
p1
setwd("C:\\Users\\ester\\Dropbox\\0. KMLMM\\Part 2\\Repo\\data")
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
setwd("C:/Users/ester/Dropbox/0. KMLMM/Part 2/Repo")
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- test[,-ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
Y_test <- predict(p1, newdata=X_test)
colnames(X_test)
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- testt[,-ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
Y_test <- predict(p1, newdata=X_test)
Y_test_pred <- predict(p1, newdata=X_test)
response.test <- c(rep(1,11),rep(0,5),rep(1,2),rep(0,2),rep(1,1),rep(0,7),rep(1,6))
Y_test_pred <- predict(p1, newdata=X_test)
text(response.test, Y_test_pred, labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
text(response.test, Y_test_pred, labels=rownames(X_train), col=as.vector(factor(response.test,levels=c(0,1),labels=c("red","blue"))))
response.test <- c(rep(1,11),rep(0,5),rep(1,2),rep(0,2),rep(1,1),rep(0,7),rep(1,6))
Y_test_pred <- predict(p1, newdata=X_test)
text(response.test, Y_test_pred, labels=rownames(X_train), col=as.vector(factor(response.test,levels=c(0,1),labels=c("red","blue"))))
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
response.test <- c(rep(1,11),rep(0,5),rep(1,2),rep(0,2),rep(1,1),rep(0,7),rep(1,6))
Y_test_pred <- predict(p1, newdata=X_test)
text(response.test, Y_test_pred, labels=rownames(X_train), col=as.vector(factor(response.test,levels=c(0,1),labels=c("red","blue"))))
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
Y_test_pred <- predict(p1, ncomp=nd, newdata=X_test)
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
p1$scores
logitMod <- glm(response ~ ., data=traint, family=binomial(link="logit"))
logit.mod <- glm(response ~ ., data=traint, family=binomial(link="logit"))
predicted <- predict(logit.mod, X_train, type="response")  # predicted scores
p1$scores
train.pls <- p1$scores[,1:nd]
train.pls <- as.data.frame(p1$scores[,1:nd])
train.pls <- cbind(train.pls, response)
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
logit.mod <- glm(response ~ ., data=train.pls, family="binomial")
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
predicted <- predict(logit.mod, p1$scores[,1:nd], type="response")  # predicted scores
predicted <- predict(logit.mod, as.data.frame(p1$scores[,1:nd]), type="response")  # predicted scores
precicted
predicted
plot(logit.mod)
plot(response, predicted)
response
predicted
as.data.frame(p1$scores[,1:nd])
setwd("C:/Users/ester/Dropbox/0. KMLMM/Part 2/Repo")
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- testt[,-ind.resp]
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
scale(X_train,scale=F) %*% p1$projection
p1$projection
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
predicted <- predict(logit.mod, as.data.frame(p1$scores[,1:nd]), type="response")  # predicted scores
X_test_pls
response_test <- c(rep(1,11),rep(0,5),rep(1,2),rep(0,2),rep(1,1),rep(0,7),rep(1,6))
Y_test_pred <- predict(p1, newdata=X_test)
text(response.test, Y_test_pred, labels=rownames(X_train), col=as.vector(factor(response_test,levels=c(0,1),labels=c("red","blue"))))
X_train_pls <- as.data.frame(p1$scores[,1:nd])
train_pls <- cbind(X_train_pls, response)
test_pls <- cbind(X_test_pls, response_test)
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
predicted <- predict(logit.mod, X_train_pls, type="response")
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
test_predicted <- predict(logit.mod, X_test_pls, type="response")
X_test_pls <- as.data.frame(scale(X_test,scale=F) %*% p1$projection)
test_pls <- cbind(X_test_pls, response_test)
logit.mod <- glm(response ~ ., data=train.pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
test_predicted <- predict(logit.mod, X_test_pls, type="response")
p1$projection
X_test_pls <- as.data.frame(scale(X_test,scale=F) %*% p1$projection)[,1:nd]
plot(response_test, test_predicted)
X_train_pls <- as.data.frame(p1$scores)
train_pls <- cbind(X_train_pls, response)
# 1 and 2
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- testt[,-ind.resp]
# 3
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
# 1 and 2
train <- read.csv("data/data_set_ALL_AML_train.csv", sep=";", header=TRUE)
test  <- read.csv("data/data_set_ALL_AML_independent.csv", sep=";", header=TRUE)
filter_dataset <- function(df) {
numeric.colums <- gtools::mixedsort(colnames(df)[grepl("X", colnames(df))])
df <- df[,numeric.colums]
dft <- t(df)
colnames(dft) <- paste0("g", seq(1,nrow(df)))
dft <- as.data.frame(dft)
return(dft)
}
traint <- filter_dataset(train)
testt <- filter_dataset(test)
response <- c(rep(1,27),rep(0,11))
traint <- cbind(traint, response)
ind.resp <- which(colnames(traint)=="response")
X_train <- traint[,-ind.resp]
Y_train <- traint[,ind.resp]
X_test <- testt[,-ind.resp]
# 3
p1 <- plsr(response ~ ., ncomp = 10, data = traint, validation = "LOO")
plot(RMSEP(p1), legendpos = "topright")
R2(p1)
plot(R2(p1), legendpos = "bottomright")
nd <- 4
plot(p1, plottype = "scores", comps = 1:2, type="n", main="X Scores")
text(p1$scores, labels=rownames(p1$scores), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
abline(h=0,v=0, col="gray")
# prediction plot
plot(p1, ncomp = nd, asp = 1, line = TRUE, type="n")
text(Y_train, p1$fitted.values[,,nd], labels=rownames(X_train), col=as.vector(factor(response,levels=c(0,1),labels=c("red","blue"))))
# 4
X_train_pls <- as.data.frame(p1$scores)
train_pls <- cbind(X_train_pls, response)
X_test_pls <- as.data.frame(scale(X_test,scale=F) %*% p1$projection)
test_pls <- cbind(X_test_pls, response_test)
p1$scores
X_train_pls <- as.data.frame(p1$scores)
X_train_pls <- p1$scores
as.data.frame(X_train_pls)
X_train_pls <- p1$scores
train_pls <- cbind(X_train_pls, response)
colnames(p1$scores)
train_pls <- as.data.frame(train_pls)
X_train_pls <- p1$scores
train_pls <- cbind(X_train_pls, response)
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
test_pls <- cbind(X_test_pls, response_test)
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
X_train_pls <- p1$scores
train_pls <- as.data.frame(cbind(X_train_pls, response))
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
X_train_pls
train_pls
X_train_pls <- data.frame(p1$scores)
X_train_pls <- as.data.frame(p1$scores)
X_train_pls <- as.matrix(p1$scores)
p1$scores
p1$scores[1]
X_train_pls <- as.data.frame(p1$scores)
X_train_pls <- as.data.frame(p1$scores)
as.numeric(p1$scores)
X_train_pls <- as.data.frame(p1$scores)
train_pls <- cbind(X_train_pls, response)
X_train_pls <- train_pls[,which(colnames(train_pls)!="response")]
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
X_train_pls <- as.data.frame(p1$scores)
train_pls <- cbind(X_train_pls, response)
X_train_pls <- train_pls[,which(colnames(train_pls)!="response")]
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
train_pls <- as.data.frame(cbind(X_train_pls, response))
X_train_pls <- as.data.frame(p1$scores)
train_pls <- as.data.frame(cbind(X_train_pls, response))
X_train_pls <- train_pls[,which(colnames(train_pls)!="response")]
X_test_pls <- scale(X_test,scale=F) %*% p1$projection
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
X_train_pls <- p1$scores
train_pls <- as.data.frame(cbind(X_train_pls, response))
X_train_pls <- train_pls[,which(colnames(train_pls)!="response")]
library("pls")
test_predicted <- predict(logit.mod, X_test_pls, type="response")
X_test_pls <- as.data.frame(X_test_pls)
logit.mod <- glm(response ~ ., data=train_pls, family=binomial(link="logit"))
train_predicted <- predict(logit.mod, X_train_pls, type="response")
test_predicted <- predict(logit.mod, X_test_pls, type="response")
